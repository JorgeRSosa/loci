#   row_group_label_fonts = row_group_label_fonts)
kable(tabla1[[1]], "latex",
booktabs = T, align = "c", linesep = '') %>%
collapse_rows(1:3, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts)
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_classic('basic') %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts)
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered') %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts)
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered') %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts)
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered') %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts) %>%
add_header_above('$\rho$'=-4)
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered') %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts) %>%
add_header_above('$\rho$'=4)
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered') %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts) %>%
add_header_above(c('$\rho$'=4))
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered') %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts) %>%
add_header_above(c(''=2,'$\rho$'=4))
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered') %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts)
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered',full_width = F) %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts)
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered',full_width = F,aling='c') %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts)
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered',full_width = F) %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts)
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla1[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered',full_width = F) %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts)
load('p25f.RData')
load('p50f.RData')
load('p100f.RData')
p12 <- seq(0.7,1,0.08)
muestra <- as.numeric(cbind(rep(25,12),rep(50,12),rep(100,12)))
radio <- as.numeric(cbind(rep(20,4),rep(22,4),rep(24,4),
rep(25,4),rep(35,4),rep(45,4),
rep(40,4),rep(71,4),rep(95,4)))
theta <- rep(p12,9)
tabla3 <- list()
for(i in 1:5){
a <- p25f[[i]]
b <- p50f[[i]]
c <- p100f[[i]]
dataset <- data.frame(Muestra = muestra,
Radio = radio,
Theta = theta)
for(j in 1:5){
aux <- a[[j]]
aux2 <- b[[j]]
aux3 <- c[[j]]
v25 <- as.numeric(cbind(aux[1,],aux[2,],aux[3,]))
v50 <- as.numeric(cbind(aux2[1,],aux2[2,],aux2[3,]))
v100 <- as.numeric(cbind(aux3[1,],aux3[2,],aux3[3,]))
dataset[,j+3] <- as.numeric(cbind(v25,v50,v100))
}
colnames(dataset) <- c('Muestra','Radio','Theta','0.2','0.4','0.6','0.8','1')
tabla3[[i]] <- dataset
}
row_group_label_fonts <- list(
list(bold = T, italic = T),
list(bold = F, italic = F)
)
tabla3[[1]]%>%
kbl() %>%
kable_styling(bootstrap_options = 'bordered',full_width = F) %>%
collapse_rows(1:2, latex_hline = 'custom', custom_latex_hline = 1:3,
row_group_label_position = 'identity', # o 'stack'
row_group_label_fonts = row_group_label_fonts)
setwd("~/Practicas/Prácticas Logika/Datos_Funcionales")
load('data.Rdata')
load('fechas.Rdata')
library(readxl)
?write.xlsx
write(data,file = 'Datos.xlsx')
library(openxlsx)
write.xlsx(data,file = 'Datos.xlsx')
write.xlsx(as.data.frame(data),file = 'Datos.xlsx')
fechas <- read.csv('fecha.csv',sep = ',')
# umbral 29.1 a 99.88
at <- apply(data, 1, comp <- function(x) {
sum(ifelse(x < 29.1 | 99.88 < x,1,0))
})
outlier <- ifelse(0<at,1,0)
######################Realizar el etiquetado de atípicos#######################
load('data.Rdata')
# umbral 29.1 a 99.88
at <- apply(data, 1, comp <- function(x) {
sum(ifelse(x < 29.1 | 99.88 < x,1,0))
})
outlier <- ifelse(0<at,1,0)
sum(outlier)
sum(at)
which(0<outlier )
fecha[ which(0<outlier )]
View(fechas)
fechas_et <- as.data.frame(cbind(fechas[,2],outlier,1:nrow(fechas)))
colnames(fechas_et) <- c('Fecha','Outlier','id')
View(fechas_et)
write.xlsx(as.data.frame(fechas_et),file = 'fecha_et.xlsx')
data <- read.xlsx('Datos.xlsx',sheet = 'Humedad')
?read.xlsx
data <- ?read.xlsx('Datos.xlsx',sheet = 'Humedad',colNames = F)
data <- ?read.xlsx('Datos.xlsx',sheet = 'Humedad')
data <- read.xlsx('Datos.xlsx',sheet = 'Humedad')
load('data.Rdata')
data <- read.xlsx('Datos.xlsx',sheet = 'Humedad')
View(data)
data <- read.xlsx('Datos.xlsx',sheet = 'Humedad')
data <- read.xlsx('Datos.xlsx',sheet = 'Humedad')
data <- read.xlsx('Datos.xlsx',sheet = 'Humedad')
View(data)
class(data)
#################################################################################
#################50 primeros días del año 2014###################################
################################################################################
df <- data[1:365,]
h <- 1:24
df <- cbind(h,t(df))
df <- as.data.frame(df) #Data Frame de Temperatura Promedio
df1 <- df[,c(1:50)]
#df2 <- d[,c(1:50)]
is.na(df)
# #### Grafico por dia de la Temperatura Promedio
df_ <-  melt(df1,id.vars = 'h')
library(tidyverse)
library(ggplot2)
library(tidyr)
library(reshape)
library(lubridate)
# #### Grafico por dia de la Temperatura Promedio
df_ <-  melt(df1,id.vars = 'h')
ggplot(df_, aes(x = h, y = value, col=variable, group=variable)) +
theme( axis.text.x = element_blank ( ) ) +
labs(x='',y='Humedad Promedio') +
geom_line()
library(fda)
library(fda.usc)
library(ftsa)
argvals <- 1:24
dff <- fdata ( data , argvals = argvals ,
names = list(main= 'Humedad Promedio' ,
xlab= 'Hora del Dia ' , ylab= 'Humedad Promedio') )
is.fdata ( dff )
dim( dff )
rangeval ( dff )
fechas_et <- read.xlsx('Datos.xlsx',sheet = 'Fechas')
View(fechas_et)
fechas_et <- read.xlsx('Datos.xlsx',sheet = 'Fechas')
View(fechas_et)
str(fechas_et)
library(tidyverse)
library(fda)
library(fda.usc)
library(MASS)
library(caret)
library(ggplot2)
source("LOCI.R")
select<-dplyr::select
fechas_et <- read.xlsx('Datos.xlsx',sheet = 'Fechas')
load('dataf.Rdata')
load("matriz_score_train.Rdata")
load("datosentrenamiento.RData")
scores<-list()
# for(i in 1:length(train_list)){
#   scores[[i]]<-fLOCI(train_list[[i]],alpha = 0.78,nn = 620)
# }
# save(scores,file="resultados.RData")
load("resultados.RData")
############################calculo el score############################
lsce<-lapply(scores, function(x)x[["MDEF"]]/x[["norm_MDEF"]])
sce<-unlist(lsce)
sum(sce>3)
hist(sce,main = "")
################################################################################
set.seed(12345)
muestra <- createDataPartition(fechas_et[,2],p=0.53)
val <- fechas_et[-as.integer(unlist(muestra)),]
dttrain<-fechas_et[as.integer(unlist(muestra)),1]
dataloci<-as.data.frame(cbind(dttrain,score$r_620))
colnames(dataloci) <- c('fecha','r_620')
dataloci <- dataloci %>% mutate(r_620=as.numeric(dataloci[,2]))
########################Evaluamos el entrenamiento##############################
quantile(sce, c(.50, .75, .90,.99))
q_99<-as.data.frame(cbind(dataloci,limite=quantile(sce, c(.99)) ))
colnames(q_99)<-c("fecha","score","limite")
######################################################
q_99<-q_99 %>% mutate(clase=ifelse(score>limite,1,0))
anom_q99 <- q_99[q_99$clase==1,] %>% select(fecha,clase) %>% unique()
#######################################################
q_99<-q_99 %>% mutate(clase_res=as.factor(ifelse(fecha%in%anom_q99$fecha,1,0)))
sum(as.numeric(q_99$clase_res))
##########################crear matriz de confusion#############################
anom_q99<-anom_q99 %>% mutate(fecha=as.Date(as.character(fecha)))
mod <- fechas_et[as.integer(unlist(muestra)),]
mod<-mod %>% mutate(marca_2=ifelse(as.Date(Fecha)%in%anom_q99$fecha,1,0))
mod <- mod %>% mutate(Outlier=as.numeric(Outlier))
sum(mod$marca_2)
confusion<-table(mod$Outlier,mod$marca_2)
confusion
acc <- (confusion[1,1]+confusion[2,2])/sum(confusion) #0.9827883
pre <- (confusion[1,1] /(confusion[1,1] +confusion[1,2])) #0.9973475
acc
pre
#Elemento de grafica para calcular el Ã¡rea bajo la curva AUC
library(plotROC)
p1 <- ggplot(mod,aes(d=Outlier,m=marca_2)) + geom_roc()+ style_roc() #Grafica Curva ROC basica para colocar el area bajo la curva
#Curva ROC
logroc<-ggplot(mod, aes(d=Outlier,m=marca_2)) +
theme_bw()+
geom_roc(n.cuts = 0, colour="#3AA717") +
theme(axis.text = element_text(colour = "black"),
plot.title = element_text(hjust = 0.5))+
ggtitle("Curva roc LOCI límite 3.5")+
scale_x_continuous("\n1 - Especifidad (FPF)", breaks = seq(0, 1, by = .2))+
scale_y_continuous("Sensibilidad (TPF)\n", breaks = seq(0, 1, by = .2)) +
geom_abline(intercept=0, slope=1, colour="blue", linetype="dashed") +
annotate("text", x=0.6, y=0.45, parse=TRUE,
label=paste0("AUC: ",round(calc_auc(p1)$AUC,3)), colour="blue")+
ggExtra::removeGridX()+
ggExtra::removeGridY()
logroc
#AUC=0.724
########################## aplico a la base de validación########################
test<-dataf
test$data <- dataf$data[-as.integer(unlist(muestra)),]
# restest <- fLOCI(test,0.78,620)
# save(restest,file = "testeo.RData")
load("testeo.RData")
sc_test<-restest$MDEF/restest$norm_MDEF
dat_test<-data.frame(fecha=fechas_et[-as.integer(unlist(muestra)),1],score=sc_test,limite=quantile(sce, c(.99)))
dat_test<-dat_test %>% mutate(evaluacion=ifelse(score>limite,1,0))
anom_test<-dat_test[dat_test$evaluacion==1,] %>% select(fecha,evaluacion) %>% unique()
#######################################################
dat_test<-dat_test %>% mutate(clase_res=as.factor(ifelse(fecha%in%anom_test$fecha,1,0)))
dat_test<-merge(dat_test,val,by.x="fecha",by.y="Fecha")
dat_test <- dat_test %>% select(-id)
dat_test<-dat_test %>% mutate(tet=ifelse(Outlier==clase_res,"Bien etiquetado","Mal etiquetado"))
####################construccion de la matriz de confusion
val<-val %>% mutate(marca_2=ifelse(Fecha%in%anom_test$fecha,1,0))
confusion<-table(val$Outlier,val$marca_2)
confusion
acc <- (confusion[1,1]+confusion[2,2])/sum(confusion) # 0.9902724
pre <- (confusion[1,1] /(confusion[1,1] +confusion[1,2]))  # 1
acc
pre
val <- val %>% mutate(Outlier=as.numeric(Outlier))
############################################################################
p2<- ggplot(val, aes(d=Outlier,m=marca_2)) + geom_roc()+ style_roc() #Grafica Curva ROC basica para colocar el area bajo la curva
#Curva ROC
logroc<-ggplot(val, aes(d=Outlier,m=marca_2)) +
theme_bw()+
geom_roc(n.cuts = 0, colour="#3AA717") +
theme(axis.text = element_text(colour = "black"),
plot.title = element_text(hjust = 0.5))+
ggtitle("Curva roc LOCI limite 3.5 para validación")+
scale_x_continuous("\n1 - Especifidad (FPF)", breaks = seq(0, 1, by = .2))+
scale_y_continuous("Sensibilidad (TPF)\n", breaks = seq(0, 1, by = .2)) +
geom_abline(intercept=0, slope=1, colour="blue", linetype="dashed") +
annotate("text", x=0.6, y=0.45, parse=TRUE,
label=paste0("AUC: ",round(calc_auc(p2)$AUC,3)), colour="blue")+
ggExtra::removeGridX()+
ggExtra::removeGridY()
logroc
mod <- fechas_et[as.integer(unlist(muestra)),]
mod <- mod %>% mutate(score=score$r_620) %>% mutate(marca_2=ifelse(score > 3 ,1,0))
mod <- mod %>% mutate(Outlier=as.numeric(Outlier))
sum(mod$marca_2)
confusion<-table(mod$Outlier,mod$marca_2)
confusion
acc <- (confusion[1,1]+confusion[2,2])/sum(confusion) #0.9827883
pre <- (confusion[1,1] /(confusion[1,1] +confusion[1,2])) #0.9938108
acc
pre
#Elemento de grafica para calcular el Ã¡rea bajo la curva AUC
p1 <- ggplot(mod,aes(d=Outlier,m=marca_2)) + geom_roc()+ style_roc() #Grafica Curva ROC basica para colocar el area bajo la curva
#Curva ROC
logroc<-ggplot(mod, aes(d=Outlier,m=marca_2)) +
theme_bw()+
geom_roc(n.cuts = 0, colour="#3AA717") +
theme(axis.text = element_text(colour = "black"),
plot.title = element_text(hjust = 0.5))+
ggtitle("Curva roc LOCI límite 3")+
scale_x_continuous("\n1 - Especifidad (FPF)", breaks = seq(0, 1, by = .2))+
scale_y_continuous("Sensibilidad (TPF)\n", breaks = seq(0, 1, by = .2)) +
geom_abline(intercept=0, slope=1, colour="blue", linetype="dashed") +
annotate("text", x=0.6, y=0.45, parse=TRUE,
label=paste0("AUC: ",round(calc_auc(p1)$AUC,3)), colour="blue")+
ggExtra::removeGridX()+
ggExtra::removeGridY()
logroc
## AUC= 0.787
######################## PARA VALIDACION##############
sc_test<-restest$MDEF/restest$norm_MDEF
dat_test<-data.frame(fecha=fechas_et[-as.integer(unlist(muestra)),1],score=sc_test,limite=3)
dat_test<-dat_test %>% mutate(evaluacion=ifelse(score>limite,1,0))
anom_test<-dat_test[dat_test$evaluacion==1,] %>% select(fecha,evaluacion) %>% unique()
#######################################################
dat_test<-dat_test %>% mutate(clase_res=as.factor(ifelse(fecha%in%anom_test$fecha,1,0)))
dat_test<-merge(dat_test,val,by.x="fecha",by.y="Fecha")
dat_test <- dat_test %>% select(-id)
dat_test<-dat_test %>% mutate(tet=ifelse(Outlier==clase_res,"Bien etiquetado","Mal etiquetado"))
####################construccion de la matriz de confusion
val<-val %>% mutate(marca_2=ifelse(Fecha%in%anom_test$fecha,1,0))
confusion<-table(val$Outlier,val$marca_2)
confusion
acc <- (confusion[1,1]+confusion[2,2])/sum(confusion) # 0.9824903
pre <- (confusion[1,1] /(confusion[1,1] +confusion[1,2]))  # 0.991018
acc
pre
val <- val %>% mutate(Outlier=as.numeric(Outlier))
############################################################################
p2<- ggplot(val, aes(d=Outlier,m=marca_2)) + geom_roc()+ style_roc() #Grafica Curva ROC basica para colocar el area bajo la curva
#Curva ROC
logroc<-ggplot(val, aes(d=Outlier,m=marca_2)) +
theme_bw()+
geom_roc(n.cuts = 0, colour="#3AA717") +
theme(axis.text = element_text(colour = "black"),
plot.title = element_text(hjust = 0.5))+
ggtitle("Curva roc LOCI limite 3 para validación")+
scale_x_continuous("\n1 - Especifidad (FPF)", breaks = seq(0, 1, by = .2))+
scale_y_continuous("Sensibilidad (TPF)\n", breaks = seq(0, 1, by = .2)) +
geom_abline(intercept=0, slope=1, colour="blue", linetype="dashed") +
annotate("text", x=0.6, y=0.45, parse=TRUE,
label=paste0("AUC: ",round(calc_auc(p2)$AUC,3)), colour="blue")+
ggExtra::removeGridX()+
ggExtra::removeGridY()
logroc
setwd("~/Practicas/Prácticas Logika/Datos_Funcionales/Dos")
setwd("~/Practicas/Prácticas Logika/Tobar/codigos")
library(readxl)
data_tesis <- read_excel("data tesis.xlsx",  sheet = "HORAS INPUTADO")
View(data_tesis)
library(tsibble)
library(tsibbledata)
library(lubridate)
library(tidyverse)
library(viridis)
library(sugrrants)
library(janitor)
library(DDoutlier)
####################grafico de la evolucion de la potencia en el tiempo#################
data_tesis<-data_tesis %>% clean_names() %>% mutate(x_u_feff_date=date) %>% select(-date)
####################grafico de la evolucion de la potencia en el tiempo#################
data_tesis<-data_tesis %>% clean_names() %>% mutate(x_u_feff_date=date) #%>% select(-date)
View(data_tesis)
select<-dplyr::select
####################grafico de la evolucion de la potencia en el tiempo#################
data_tesis<-data_tesis %>% clean_names() %>% mutate(x_u_feff_date=date) %>% select(-date)
Chiller <- data_tesis %>% select(x_u_feff_date,time,analizador_chiller_potencia_activa_kw) %>%
mutate(Fecha=as.Date(x_u_feff_date)) %>% mutate(mes=month(Fecha)) %>% filter(mes%in%c(9,10,11))
str(Chiller)
class(Chiller$x_u_feff_date)
Chiller_fc<- Chiller %>% frame_calendar(x = time, y = vars(analizador_chiller_potencia_activa_kw), date =Fecha, calendar = "monthly")
str(Chiller_fc)
p1 <- Chiller_fc%>%  ggplot(aes(x = .time, y = .analizador_chiller_potencia_activa_kw, group = Fecha)) +  geom_line()
###########################################PARTICIONAR LA DATA########################################################
#0<-inlier
#1<-outlier
##################Quito la ultima fecha pues tiene datos incompletos######################
data<-data_tesis %>% filter(x_u_feff_date!=max(data_tesis$x_u_feff_date))
###################################Selecciono unicamente las fechas##################
fechas_et<- read_excel("data tesis.xlsx",  sheet = "FECHAS_ETIQUETA")
fechas_et<-fechas_et %>% clean_names() %>% mutate(x_u_feff_date=date) %>% select(-date)
fechas_et<-fechas_et %>% filter(x_u_feff_date!=max(fechas_et$x_u_feff_date)) #%>% select(-observacion)
View(fechas_et)
fechas_et<-fechas_et %>% filter(x_u_feff_date!=max(fechas_et$x_u_feff_date)) %>% select(-observacion)
View(fechas_et)
View(data_tesis)
library(caTools)
library(ROSE)
library(data.table)
set.seed(12345)
muestra <- sample.split(setDF(fechas_et),SplitRatio=0.5)
setDT(fechas_et)[,.N,by=marca]
mod <- setDT(subset(setDF(fechas_et), muestra == TRUE))
setDT(mod)[,.N,by=marca]
val <- setDT(subset(setDF(fechas_et), muestra == FALSE))
setDT(val)[,.N,by=marca]
#######################################################################################################
test<-data %>% filter(x_u_feff_date%in%val$x_u_feff_date)
test<-merge(test,val,by="x_u_feff_date")
View(test)
################################################trabajando con el train#######################################################
###########################Establecer Alpha###########################
alpha<-seq(0.1,1,0.05)
##############Aplico el algoritmo loci para saber con que alpha trabajar###############################33
dtnumeric<-data %>% filter(x_u_feff_date%in%mod$x_u_feff_date)   %>% select(-x_u_feff_date,-time)
#sum(LOCI(dtnumeric,0.75,1000)$class=="Outlier")
#save(clase,file="clase.RData")
load("clase.RData")
apply(clase,2,function(x)sum(x=="Outlier"))
View(clase)
View(dtnumeric)
a <- LOCI(dtnumeric,0.75)
View(a)
LOCI
n <- nrow(dtnumeric)
dtnumeric <- as.matrix(dtnumeric)
distMatrix <- as.matrix(dist(dtnumeric))
View(distMatrix)
distMatrix[1:5,1:5]
?dist()
class(dtnumeric)
x <- matrix(rnorm(16), ncol = 4)
z <- unlist(apply(x, 1, list), recursive = FALSE)
View(z)
z[[1]]
x
d <- dist(z)
dist(z, z)
?metric.lp()
